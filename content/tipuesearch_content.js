var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://41123230guansen.github.io/cd2024/ \n 網誌:\xa0 https://41123230guansen.github.io/cd2024/blog \n 簡報:\xa0 https://41123230guansen.github.io/cd2024/reveal \n 倉儲:   https://github.com/41123230GUANSEN/cd2024 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n', 'tags': '', 'url': 'Brython.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'Odoo翻譯', 'text': 'LaTeX:Odoo翻譯P1-11 程式檔 ； PDF \n', 'tags': '', 'url': 'Odoo翻譯.html'}, {'title': '影片上字幕', 'text': 'cd2024 2b 3 如何設定 Github 帳號的雙重認證 3 (字幕) \n \n 字幕檔 \n 摘要:老師這部影片教我們如何設定雙重認證，我們利用手機下載mobile github，利用手機來進行身分雙重認證，以確保登陸的是本人。3 \n cd2024 2b w5 指定影片加註任務 統整網誌以及配置 NX 可攜與 PC 執行規劃14(字幕) \n \n 字幕檔 \n 摘要:老師這部影片詳細說明W5的任務內容，我們需要找出之前老師的教學影片並上字幕、附上逐字檔，並且在影片下方增加摘要說明影片內容。 \n', 'tags': '', 'url': '影片上字幕.html'}, {'title': '期中報告影片', 'text': '\n 自評分數:70 \n', 'tags': '', 'url': '期中報告影片.html'}, {'title': 'w9', 'text': '鋼球平衡台 PID 控制與模擬 \n 對 Gemini 1.5 Pro 提問: \n 以下為利用 PID 控制 CoppeliaSim \xa0 鋼球平衡台場景 的 ZMQ RemoteAPI Python 程式, 請利用 Python 模組將系統控制過程, 鋼球在平衡台上的 x 方向座標與 y 方向, 利用 matplotlib 畫出來. "這裡附上原本的 PID 控制程式碼" \n 回答: \n #導入必要的模組\nimport zmq\nimport time\nimport matplotlib.pyplot as plt\n\n#建立 ZMQ context 和 socket\ncontext = zmq.Context()\nsocket = context.socket(zmq.REQ)\nsocket.connect("tcp://localhost:23000")\n#PID 控制參數（請替換為您的實際參數）\nKp = 1.0\nKi = 0.1\nKd = 0.01\n#初始化變數\nx_positions = []\ny_positions = []\nprev_error = 0\nintegral_error = 0\n#控制循環\nwhile True:\n# 獲取鋼球的 x 和 y 方向座標（請替換為您的實際程式碼）\nsocket.send(b"get_ball_position")\nmessage = socket.recv_json()\nx_position = message["x"]\ny_position = message["y"]\n# 將座標添加到列表中\nx_positions.append(x_position)\ny_positions.append(y_position)\n# 計算 PID 控制輸出（請替換為您的實際程式碼）\nerror = # ... 計算誤差 ...\nintegral_error += error\nderivative_error = error - prev_error\noutput = Kp * error + Ki * integral_error + Kd * derivative_error\nprev_error = error\n# 發送控制指令到 CoppeliaSim（請替換為您的實際程式碼）\n# ...\n# 繪製圖形\nplt.clf() # 清除之前的圖形\nplt.plot(x_positions, label="X Position")\nplt.plot(y_positions, label="Y Position")\nplt.xlabel("Time")\nplt.ylabel("Position")\nplt.legend()\nplt.pause(0.01) # 暫停以便圖形更新\n# 延遲\ntime.sleep(0.01)\n#關閉 socket 和 context\nsocket.close()\ncontext.term() \n \n 程式碼說明: \n 程式碼首先導入必要的模組，包括 zmq 用于與 CoppeliaSim 通信，time 用于延遲，以及 matplotlib.pyplot 用于繪圖。建立 ZMQ context 和 socket，並連接到 CoppeliaSim 的 RemoteAPI 端口。 初始化 PID 控制參數、變數和用於存儲鋼球座標的列表。 控制循環中，首先獲取鋼球的 x 和 y 方向座標。 計算 PID 控制輸出並發送控制指令到 CoppeliaSim。 將座標添加到列表中，並使用 matplotlib 繪製 x 和 y 方向座標隨時間變化的圖形。 程式最後關閉 socket 和 context。 請注意: 您需要將示例程式碼中的 PID 控制部分替換為您的實際程式碼。 您需要根據您的場景調整 get_ball_position 函數以獲取鋼球的座標。 您可以根據需要調整 matplotlib 繪圖參數以獲得更清晰的視覺化效果。 希望這個示例程式碼能幫助您使用 matplotlib 視覺化 CoppeliaSim 鋼球平衡台 PID 控制過程。', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': 'W10 實習的任務一: \n 已知: \xa0 2b 初步資料放入數列 \xa0 可以將 \xa0 2b.txt \xa0 即時資料取出, 並且將每一行隔開後, 逐一放入數列. \n 後續處理: 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html. \n 學員倉儲連結 template: https://github.com/學員帳號/cd2024 \n 學員網站連結 template: https://學員帳號.github.io/cd2024 \n 2b 分組倉儲連結 template: https://github.com/mdecd2024/2b-midbg組別 \n 2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別 \n W10 實習的任務二: \n 請下載 \xa0 cd2024_ball_balancing_platform_control_ref.7z , 閱讀後請將摘要內容放入個人與分組網誌中. \n \n \n \n 論文一 ： \n \n 探討自動控制理論的局限性，並將理論模型與實際構建的球體平衡平台進行比較。 \n 分析理論與實際結果之間的差異，探討控制理論與系統實施的挑戰。 \n \n \n \n 論文二 ： \n \n 提出了使用PID控制器和FPGA平行計算來提高球體位置調節精度的解決方案。 \n 該方案可應用於控制具有多個參數的高速物件。 \n \n \n \n 論文三 ： \n \n 設計並比較了三種不同的控制結構，用於自動穩定球體在平台上的位置和軌跡追踪。 \n 狀態空間觀測器具有最佳性能，並建立了一個教育平台，用於向非技術人員解釋基本控制系統原理。 \n \n \n \n 論文四 ： \n \n 開發了一個使用微控制器和控制演算法的球體平衡系統，用於控制理論的教學和應用。 \n 系統允許學生將理論知識應用於實踐中，並了解封閉迴路回饋系統和PID演算法的原理。 \n \n \n \n 論文五 ： \n \n 設計了一個二自由度球體平衡實驗平台，並使用AVR微控制器開發了一個雙環下屬控制系統。 \n 該系統具有成本效益和易於控制的優勢，並計劃改進球體位置回饋信號的濾波，以提高控制系統的速度和品質。 \n \n \n \n 論文六 ： \n \n 使用QUARC軟體設計和實現了球體在二維平台上的位置控制。 \n 實驗涵蓋了建模、控制器設計、模擬和實施等多個控制系統的關鍵步驟，為學生提供了寶貴的學習經驗。\n 這是 W10 實習的任務三: \n 請根據 \xa0 Solvespace_model _2d_for_cd2024_w6.7z \xa0 零組件尺寸, 利用 \xa0 Siemens NX1872.7z \xa0 (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中. \n零件一: 圖檔 ， 過程檔 \xa0 組立件: 圖檔 \n \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w17', 'text': '期末實習評量項目一:零件繪製過程(影片開始到12:00) \n 車子零件檔及py檔載點 \n 期末實習評量項目二:零組件組立過程(影片由12:00到結束) \n 期末實習評量項目三: 將所完成的機器人球員放入 CoppeliaSim 運動場景中 \n \n 第二次嘗試製作，最終結果影片 \n \n \xa0 \n 車子模擬: ttt檔及py檔連結 \n \n \n \n', 'tags': '', 'url': 'w17.html'}]};